#!/usr/bin/env php
<?php

require __DIR__ . '/vendor/autoload.php';

// Include the bootstrap file to initialize the database
require __DIR__ . '/config/bootstrap.php';

use Symfony\Component\Console\Application;
use Kasl\KaslFw\Console\Commands\TestCommand;
use Kasl\KaslFw\Console\Commands\MigrateCommand;
use Kasl\KaslFw\Console\Commands\RollbackCommand;
use Kasl\KaslFw\Console\Commands\ClearCacheCommand;
use Kasl\KaslFw\Console\Commands\MakeMigrationCommand;
use Kasl\KaslFw\Console\Commands\MigrateRefreshCommand;
use Kasl\KaslFw\Console\Commands\MigrateResetCommand;
use Kasl\KaslFw\Console\Commands\MakeModelCommand;
use Kasl\KaslFw\Console\Commands\MakeControllerCommand;
use Kasl\KaslFw\Console\Commands\MakeMiddlewareCommand;
use Kasl\KaslFw\Console\Commands\MakeSeederCommand;
use Kasl\KaslFw\Console\Commands\MakeFactoryCommand;
use Kasl\KaslFw\Console\Commands\DbSeedCommand;


try {
    $app = new Application('KaslFW Console', '1.0.0');

    // Register commands
    $app->add(new TestCommand());
    $app->add(new ClearCacheCommand());
    $app->add(new MigrateCommand());
    $app->add(new RollbackCommand());
    $app->add(new MakeMigrationCommand());
    $app->add(new MigrateRefreshCommand());
    $app->add(new MigrateResetCommand());
    $app->add(new MakeModelCommand());
    $app->add(new MakeControllerCommand());
    $app->add(new MakeMiddlewareCommand());
    $app->add(new MakeSeederCommand());
    $app->add(new MakeFactoryCommand());
    $app->add(new DbSeedCommand());


    $app->run();
} catch (Exception $e) {
    fwrite(STDERR, 'Error: ' . $e->getMessage() . PHP_EOL);
    exit(1);
}
